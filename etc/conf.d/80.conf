server {
    gzip on;
    gzip_disable "msie6";
    gzip_comp_level 6;
    gzip_min_length 1100;
    gzip_buffers 16 8k;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/js
        text/xml
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        application/xml
        application/rss+xml
        image/svg+xml;

    listen 80 default_server;
    listen [::]:80 default_server;
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name _;

    ssl_certificate /etc/nginx/ssl/certs/server-cert.pem;
    ssl_certificate_key /etc/nginx/ssl/private/server-key.pem;

    resolver 127.0.0.11 ipv6=off valid=30s;

    ssl_session_cache shared:le_nginx_SSL:10m;
    ssl_session_timeout 1440m;
    ssl_session_tickets off;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";

    set $path_to_password_file /var/www/shared/.htpasswd;
    ## enable basic auth if file exists
    set $auth_basic off;
    if (-f $path_to_password_file) {
        set $auth_basic Restricted;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/shared;
    }

    location / {
        auth_basic $auth_basic;
        auth_basic_user_file $path_to_password_file;

        set $smartui "2smart-ui";
        proxy_pass http://$smartui:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        expires off;
    }

    location /static {
        set $smartui "2smart-ui";
        proxy_pass http://$smartui:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        expires 30d;

        location ~* config\.js$ {
            set $smartui "2smart-ui";
            proxy_pass http://$smartui:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            expires -1;
            add_header Cache-Control no-store;
        }
    }

    location /releases {
        expires off;
        autoindex on;
        root /var/tmp ;
    }

    location /api {
        set $clientdashboardbe "client-dashboard-be";
        proxy_pass http://$clientdashboardbe:8000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        expires off;
        location ~* static/icons/([a-zA-Z0-9_]+).svg$ {
            set $clientdashboardbe "client-dashboard-be";
            proxy_pass http://$clientdashboardbe:8000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            expires 30d;
        }
    }

    location /backups {
        set $backupservice "backup-service";
        proxy_pass http://$backupservice:9000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /mqtt {
        set $emqxbroker "2smart-emqx";
        proxy_pass http://$emqxbroker:8083;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /grafana {
        auth_basic $auth_basic;
        auth_basic_user_file $path_to_password_file;

        # this ensure that Grafana does not try to authenticate the user using nginx basic auth creds
        proxy_set_header Authorization ""; 

        set $grafanaservice "grafana-service";
        proxy_pass http://$grafanaservice:3001;
        rewrite ^/grafana/?(.*) /$1 break;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        expires 30d;
    }

    location ~* ^/service/(?<uuid>[a-z0-9]+)(?<route>.*) {
        set $prefix "service";
        set $port "6060";
        proxy_pass http://$prefix-$uuid:$port$route$is_args$args;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    location /resources {
        expires off;
        autoindex on;
        root /var/tmp ;
    }
}
